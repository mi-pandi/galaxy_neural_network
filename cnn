package main;
//Додатки до роботи Чернишевич Мирослави
import org.apache.log4j.BasicConfigurator;
import org.datavec.image.loader.NativeImageLoader;
import org.deeplearning4j.datasets.iterator.impl.ListDataSetIterator;
import org.deeplearning4j.eval.Evaluation;
import org.deeplearning4j.nn.conf.MultiLayerConfiguration;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.layers.DenseLayer;
import org.deeplearning4j.nn.conf.layers.OutputLayer;
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.nn.weights.WeightInit;
import org.deeplearning4j.optimize.listeners.ScoreIterationListener;
import org.nd4j.linalg.activations.Activation;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.dataset.DataSet;
import org.nd4j.linalg.dataset.api.iterator.DataSetIterator;
import org.nd4j.linalg.dataset.api.preprocessor.ImagePreProcessingScaler;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.linalg.learning.config.Nesterovs;
import org.nd4j.linalg.lossfunctions.LossFunctions;

import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.Random;

public class NeuralNet {
    private static final String RESOURCES_FOLDER_PATH = "C:\\Users\\Mira\\IdeaProjects\\Neuron\\src\\resource\\resources\\galaxies_photo_";
    private static final int HEIGHT = 28; //quantity of pixels
    private static final int WIDTH = 28;
    private static final int N_SAMPLES_TRAINING = 112; // quantity of pictures
    private static final int N_SAMPLES_TESTING = 112;
    private static final int N_OUTCOMES = 4; // quantity of types of the output

    private static void buildModel(DataSetIterator dsi) throws IOException {

        int rngSeed = 123;

        System.out.print("Build Model...");
        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()
                .seed(rngSeed)
                .updater(new Nesterovs(0.006, 0.9))
                .l2(1e-4).list()
                .layer(new DenseLayer.Builder()
                        .nIn(HEIGHT*WIDTH).nOut(1000).activation(Activation.RELU)
                        .weightInit(WeightInit.XAVIER).build())
                .layer(new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)
                        .nIn(1000).nOut(N_OUTCOMES).activation(Activation.SOFTMAX)
                        .weightInit(WeightInit.XAVIER).build())
                .build();
        MultiLayerNetwork model = new MultiLayerNetwork(conf);
        model.init();
        //Print score every 20 interaction
        model.setListeners(new ScoreIterationListener(20));
        System.out.print("Train Model...");
        model.fit(dsi);
        //Evaluation
        DataSetIterator testDsi = getDataSetIterator(RESOURCES_FOLDER_PATH+"/testing", N_SAMPLES_TESTING);
        System.out.print("Evaluating Model...");
        Evaluation eval = model.evaluate(testDsi);
        System.out.print(eval.stats());
    }

    private static DataSetIterator getDataSetIterator(String folderPath, int nSamples) throws IOException {
        File folder = new File(folderPath);
        File[] galaxiesFolders = folder.listFiles();
        NativeImageLoader nil = new NativeImageLoader(HEIGHT, WIDTH);
        ImagePreProcessingScaler scalar = new ImagePreProcessingScaler(0, 1);
        INDArray input = Nd4j.create(new int[]{nSamples, HEIGHT * WIDTH});
        INDArray output = Nd4j.create(new int[]{nSamples, N_OUTCOMES});
        int n = 0;
        assert galaxiesFolders != null;
        for (File galaxyFolder: galaxiesFolders) {
            int labelDigit = Integer.parseInt(galaxyFolder.getName());
            File[] imageFiles = galaxyFolder.listFiles();

            assert imageFiles != null;
            for (File imgFile : imageFiles) {
                INDArray img = nil.asRowVector(imgFile);
                scalar.transform(img);
                input.putRow(n, img);
                output.put(n, labelDigit, 1.0);
                n++;

            }
        }
        //Joining input and output matrices into a dataset
        DataSet dataSet = new DataSet(input, output);
        //Convert the dataset into a list
        List<DataSet> listDataSet = dataSet.asList();
        //Shuffle content of list randomly
        Collections.shuffle(listDataSet, new Random(System.currentTimeMillis()));
        int batchSize = 4;
        //Build and return a dataset iterator
        DataSetIterator dsi = new ListDataSetIterator<DataSet>(listDataSet, batchSize);
        return dsi;
    }

    public static void main(String[] args) throws IOException {
        BasicConfigurator.configure();
        DataSetIterator dataSetIterator = getDataSetIterator(RESOURCES_FOLDER_PATH + "/training", N_SAMPLES_TRAINING);
        buildModel(dataSetIterator);
    }
}
